{
  "name": "react-native-camera",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/lwansbrough/react-native-camera.git"
  },
  "version": "0.3.5",
  "description": "A Camera component for React Native. Also reads barcodes.",
  "author": {
    "name": "Lochlan Wansbrough",
    "email": "lochie@live.com",
    "url": "http://lwansbrough.com"
  },
  "nativePackage": true,
  "keywords": [
    "react-native",
    "react",
    "native",
    "camera",
    "qr",
    "code",
    "barcode"
  ],
  "gitHead": "43e9a7937743a5aab9b4aec6ac0ef77fba6d8b08",
  "readme": "# react-native-camera\n\nA camera module for React Native.\n\n![](https://i.imgur.com/5j2JdUk.gif)\n\n## Known Issues\nBelow is a list of known issues. Pull requests are welcome for any of these issues!\n\n- Stills captured to disk will not be cleaned up and thus must be managed manually for now\n\n## Getting started\n\n1. `npm install react-native-camera@latest --save`\n2. In XCode, in the project navigator, right click `Libraries` ➜ `Add Files to [your project's name]`\n3. Go to `node_modules` ➜ `react-native-camera` and add `RCTCamera.xcodeproj`\n4. In XCode, in the project navigator, select your project. Add `libRCTCamera.a` to your project's `Build Phases` ➜ `Link Binary With Libraries`\n5. Click `RCTCamera.xcodeproj` in the project navigator and go the `Build Settings` tab. Make sure 'All' is toggled on (instead of 'Basic'). Look for `Header Search Paths` and make sure it contains both `$(SRCROOT)/../../react-native/React` and `$(SRCROOT)/../../../React` - mark both as `recursive`.\n5. Run your project (`Cmd+R`)\n\n## Usage\n\nAll you need is to `require` the `react-native-camera` module and then use the\n`<Camera/>` tag.\n\n```javascript\nvar React = require('react-native');\nvar {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View,\n  TouchableHighlight\n} = React;\nvar Camera = require('react-native-camera');\n\nvar cameraApp = React.createClass({\n  getInitialState() {\n    return {\n      cameraType: Camera.constants.Type.back\n    }\n  },\n\n  render() {\n\n    return (\n      <Camera\n        ref=\"cam\"\n        style={styles.container}\n        onBarCodeRead={this._onBarCodeRead}\n        type={this.state.cameraType}\n      >\n        <Text style={styles.welcome}>\n          Welcome to React Native!\n        </Text>\n        <Text style={styles.instructions}>\n          To get started, edit index.ios.js{'\\n'}\n          Press Cmd+R to reload\n        </Text>\n        <TouchableHighlight onPress={this._switchCamera}>\n          <Text>The old switcheroo</Text>\n        </TouchableHighlight>\n        <TouchableHighlight onPress={this._takePicture}>\n          <Text>Take Picture</Text>\n        </TouchableHighlight>\n      </Camera>\n    );\n  },\n  _onBarCodeRead(e) {\n    console.log(e);\n  },\n  _switchCamera() {\n    var state = this.state;\n    state.cameraType = state.cameraType === Camera.constants.Type.back\n      ? Camera.constants.Type.front : Camera.constants.Type.back;\n    this.setState(state);\n  },\n  _takePicture() {\n    this.refs.cam.capture(function(err, data) {\n      console.log(err, data);\n    });\n  }\n});\n\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'transparent',\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n  },\n});\n\nAppRegistry.registerComponent('cameraApp', () => cameraApp);\n```\n\n## Properties\n\n#### `aspect`\n\nValues: `Camera.constants.Aspect.fit` or `\"fit\"`, `Camera.constants.Aspect.fill` or `\"fill\"` (default), `Camera.constants.Aspect.stretch` or `\"stretch\"`\n\nThe `aspect` property allows you to define how your viewfinder renders the camera's view. For instance, if you have a square viewfinder and you want to fill the it entirely, you have two options: `\"fill\"`, where the aspect ratio of the camera's view is preserved by cropping the view or `\"stretch\"`, where the aspect ratio is skewed in order to fit the entire image inside the viewfinder. The other option is `\"fit\"`, which ensures the camera's entire view fits inside your viewfinder without altering the aspect ratio.\n\n#### `captureAudio`\n\nValues: `true` (default), `false` (Boolean)\n\n*Applies to video capture mode only.* Specifies whether or not audio should be captured with the video.\n\n\n#### `captureMode`\n\nValues: `Camera.constants.CaptureMode.still` (default), `Camera.constants.CaptureMode.video`\n\nThe type of capture that will be performed by the camera - either a still image or video.\n\n#### `captureTarget`\n\nValues: `Camera.constants.CaptureTarget.cameraRoll` (default), `Camera.constants.CaptureTarget.disk`, ~~`Camera.constants.CaptureTarget.memory`~~ (deprecated), \n\nThis property allows you to specify the target output of the captured image data. By default the image binary is sent back as a base 64 encoded string. The disk output has been shown to improve capture response time, so that is the recommended value.\n\n\n#### `type`\n\nValues: `Camera.constants.Type.front` or `\"front\"`, `Camera.constants.Type.back` or `\"back\"` (default)\n\nUse the `type` property to specify which camera to use.\n\n\n#### `orientation`\n\nValues:\n`Camera.constants.Orientation.auto` or `\"auto\"` (default),\n`Camera.constants.Orientation.landscapeLeft` or `\"landscapeLeft\"`, `Camera.constants.Orientation.landscapeRight` or `\"landscapeRight\"`, `Camera.constants.Orientation.portrait` or `\"portrait\"`, `Camera.constants.Orientation.portraitUpsideDown` or `\"portraitUpsideDown\"`\n\nThe `orientation` property allows you to specify the current orientation of the phone to ensure the viewfinder is \"the right way up.\"\n\n#### `onBarCodeRead`\n\nWill call the specified method when a barcode is detected in the camera's view.\n\nEvent contains `data` (the data in the barcode) and `bounds` (the rectangle which outlines the barcode.)\n\nThe following barcode types can be recognised:\n\n- `aztec`\n- `code138`\n- `code39`\n- `code39mod43`\n- `code93`\n- `ean13`\n- `ean8`\n- `pdf417`\n- `qr`\n- `upce`\n\nThe barcode type is provided in the `data` object.\n\n#### `flashMode`\n\nValues:\n`Camera.constants.FlashMode.on`,\n`Camera.constants.FlashMode.off`,\n`Camera.constants.FlashMode.auto`\n\nUse the `flashMode` property to specify the camera flash mode.\n\n#### `torchMode`\n\nValues:\n`Camera.constants.TorchMode.on`,\n`Camera.constants.TorchMode.off`,\n`Camera.constants.TorchMode.auto`\n\nUse the `torchMode` property to specify the camera torch mode.\n\n## Component methods\n\nYou can access component methods by adding a `ref` (ie. `ref=\"camera\"`) prop to your `<Camera>` element, then you can use `this.refs.camera.capture(cb)`, etc. inside your component.\n\n#### `capture([options,] callback)`\n\nCaptures data from the camera. What is captured is based on the `captureMode` and `captureTarget` props. `captureMode` tells the camera whether you want a still image or video. `captureTarget` allows you to specify how you want the data to be captured and sent back to you. See `captureTarget` under Properties to see the available values.\n\nSupported options:\n\n - `audio` (See `captureAudio` under Properties)\n - `mode` (See  `captureMode` under Properties)\n - `target` (See `captureTarget` under Properties)\n - `metadata` This is metadata to be added to the captured image.\n   - `location` This is the object returned from `navigator.geolocation.getCurrentPosition()` (React Native's geolocation polyfill). It will add GPS metadata to the image.\n - `rotation` This will rotate the image by the number of degrees specified.\n \n#### `stopCapture()`\n\nEnds the current capture session for video captures. Only applies when the current `captureMode` is `video`.\n\n## Subviews\nThis component supports subviews, so if you wish to use the camera view as a background or if you want to layout buttons/images/etc. inside the camera then you can do that.\n\n## Todo\nThese are some features I think would be important/beneficial to have included with this module. Pull requests welcome!\n\n- [x] Video support\n- [x] Flash mode setting\n- [x] Automatic orientation adjustment\n- [ ] Tap to focus\n- [ ] Optional facial recognition (w/ ability to style box around face)\n\n------------\n\nThanks to Brent Vatne (@brentvatne) for the `react-native-video` module which provided me with a great example of how to set up this module.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/lwansbrough/react-native-camera/issues"
  },
  "homepage": "https://github.com/lwansbrough/react-native-camera#readme",
  "_id": "react-native-camera@0.3.5",
  "_shasum": "7e3d14f377196aab4142494f1c7f7676a737278e",
  "_from": "git+https://github.com/timmh/react-native-camera.git",
  "_resolved": "git+https://github.com/timmh/react-native-camera.git#43e9a7937743a5aab9b4aec6ac0ef77fba6d8b08"
}
